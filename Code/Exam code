# R project focussing on temporal analysis of Farmer-Managed Natural Regeneration (FMNR) by The Great Green Wall project in Maradi city, in Africa.

# Install the following packages using the install.packages() function. The packages should be enclosed in quotation marks.
install.packages(c("terra","ggplot2","patchwork","viridis","rasterdiv","devtools","RcolorBrewer")

# Install imageRy from GitHub
install_github("ducciorocchini/imageRy")

# Recall all the packages with the function library(), no quotation marks are needed now.
library(terra) # Used for handling spatial data, particularly raster and vector data (e.g. satellite images)
library(ggplot2) # Used for the creation of graphs
library(patchwork) # Used for combining multiple graphs into a single plot
library(viridis) # Used for color palettes that are uniform and colorblind-friendly
library(devtools) # Used for developing, installing, and managing R packages
library(imageRy) # Used for handling raster images
library(RcolorBrewer) # Used for creating color palettes, specially for data visualisation

# Function setwd() used to set the correct directory, it is needed to import images from you files
setwd("C:/Users/Utente/Desktop/spatial ecology")

# Function used to see if the directory is correct
getwd()
"C:/Users/Utente/Desktop/spatial ecology"

# Now let's import all the images of Maradi city from 2017 and 2024 downloaded from Copernicus Sentinel 2, assign them to objects and plot them to ensure the image is the chosen one
# The function used is rast() and it comes from the package "terra"

maradiTC17<-rast("tc251017.jpg")
maradiTC17<-flip(maradiTC17) # TC = True Color (bands R, G and B) 2017
plot(maradiTC17)

maradiFC17 <-rast("fc251017.jpg") # FC = False Color ((bands NIR, G and B) 2017
maradiFC17 <- flip(maradiFC17)
plot(maradiFC17)

maradiTC24 <- rast("tc231024.jpg") # TC = True Color (bands R, G and B) 2024
maradiTC24 <- flip(maradiTC24)
plot(maradiTC24)

maradiFC24 <-rast("fc231024.jpg") # FC = False Color ((bands NIR, G and B) 2024
maradiFC24 <- flip(maradiFC24)
plot(maradiFC24)

# With the function par(mfro=c(2,2)) we put multiple plots in a single plotting window made of 2 rows and 2 columns
par(mfrow=c(2,2))
plot(maradiTC17,main="True color 2017")
plot(maradiFC17,main="False color 2017")
plot(maradiTC24,main="True color 2024")
plot(maradiFC24,main="False color 2024")

dev.off()

# To classify the objects and extract the most information, we need to combine the bands from the True Color and NIR from False Color images for the year 2017
# Before, we assign to their relative objects the red, green and blue band from the True color and the NIR band for the False color

bmR17<-maradiTC17[[1]] # Red band 
bmG17<-maradiTC17[[2]] # Green band
bmB17<-maradiTC17[[3]] # Blue band
bmI17<-maradiFC17[[1]] # NIR band 
bm17<-c(bmR17,bmG17, bmB17,bmI17) # Putting all the bands together in one object 

# We can classify this image and we specify the number of classes (or clusters) and we plot to see the result  
Cbm17<-im.classify(bm17, num_clusters=2)
plot(Cbm17)

# We do the same thing for the year 2024

bmR24<-maradiTC24[[1]]
bmG24<-maradiTC24[[2]]
bmB24<-maradiTC24[[3]]
bmI24<-maradiFC24[[1]]
bm24<-c(bmR24,bmG24, bmB24,bmI24)

# Classify for the yea 2024 
Cbm24<-im.classify(bm24, num_clusters=2)
plot(Cbm24)

# We use the function par(mfrow=c(2,2) to see the plots resulted from the classification in 2017 and 2024 in a single plotting window
# Using the viridisc palette we can ensure a functional vision of the graphs for colorblind people

cl <- colorRampPalette(c("forestgreen","palegoldenrod")) (100)
viridisc <- colorRampPalette(viridis(7))(255)
par(mfrow=c(2,2))
plot(Cbm17,col=cl)
plot(Cbm17,col=viridisc)
plot(Cbm24,col=cl)
plot(Cbm24,col=viridisc)

dev.off()

# "Playing" with bands can be useful to see different things 
im.plotRGB(bm17,r=4,g=2,b=3) # NIR on red -> enhancing vegetation features
im.plotRGB(bm17,r=1,g=4,b=3) # NIR on green -> focusing on vegetation health
im.plotRGB(bm17,r=1,g=2,b=4) # NIR on blue -> emphasizing surface reflectance properties

im.plotRGB(bm24,r=4,g=2,b=3) 
im.plotRGB(bm24,r=1,g=4,b=3)
im.plotRGB(bm24,r=1,g=2,b=4)

# Calculate the amount of pixels (frequencies) with freq() function using the combined bands and the percentage of each class 
f17 <- freq(Cbm17)
tot17 <- ncell(Cbm17)
p17 = f17*100/tot17
p17
# Class 1 Restored land = 33%
# Class 2 City and deserted areas = 67%

f24 <- freq(Cbm24)
tot24 <- ncell(Cbm24)
p24 = f24*100/tot24
p24
# Class 1 Restored land = 36%
# Class 2 City and deserted areas = 64%

# We can that 
# building a dataframe
y2017 <- c(33,66)
y2024 <- c(36,63)
classM <- c("Agriculture", "Human")
group <- data.frame(classM,y2017,y2024)
group

M1 <- ggplot(group, aes(x=classM, y=y2017, fill=classM, color=classM)) +
  geom_bar(stat="identity") +
  scale_fill_manual(values=c("Agriculture"="forestgreen", "Human"="palegoldenrod")) +
  scale_color_manual(values=c("Agriculture"="forestgreen", "Human"="palegoldenrod")) +
  ylim(c(0, 100))
M1

M2 <- ggplot(group, aes(x=classM, y=y2024, fill=classM, color=classM)) +
  geom_bar(stat="identity") +
  scale_fill_manual(values=c("Agriculture"="forestgreen", "Human"="palegoldenrod")) +
  scale_color_manual(values=c("Agriculture"="forestgreen", "Human"="palegoldenrod")) +
  ylim(c(0, 100))
M2

M1+M2
M1/M2

Riassunto degli argomenti chiave:
fill: Cambia il colore del riempimento delle barre.
color: Cambia il colore del bordo delle barre.
scale_fill_manual(): Personalizza i colori del riempimento.
scale_color_manual(): Personalizza i colori del bordo.

La banda nir aggiunta rende più visibile la presenza di vegetazione andando a ridurre le differenze tra i due anni; probabilmente un'area più piccola avrebbe mostrato differenze maggiori.

CALCOLO DVI E NDVI

cl1 <- colorRampPalette(c("blue", "grey", "palegoldenrod", "#228B22", "darkgreen"))(100)

viridisc <- colorRampPalette(viridis(7))(255)

dvi2017<-bm17[[4]]-bm17[[1]]
plot(dvi2017)
plot(dvi2017,col=cl1)

dvi2024<-bm24[[4]]-bm24[[1]]
plot(dvi2024)
plot(dvi2024,col=cl1)

ndvi2017 = dvi2017/(bm17[[4]]+bm17[[1]])
plot(ndvi2017)
plot(dvi2017,col=viridisc)

ndvi2024 = dvi2024/(bm24[[4]]+bm24[[1]])
plot(ndvi2024)
plot(ndvi2024,col=viridisc)

NDVI grafiche con viridis per colorblind

par(mfrow=c(2,2))
plot(ndvi2017,col=cl1)
plot(ndvi2017,col=viridisc)
plot(ndvi2024,col=cl1)
plot(ndvi2024,col=viridisc)
dev.off()

differenze NDVI

Difndvi=ndvi2024-ndvi2017
plot(Difndvi,col=cl1)
plot(Difndvi,col=viridisc)

istogramma per vedere meglio

library(RColorBrewer)

par(mfrow=c(1,2))
ist17 <- hist(ndvi2017, main="NDVI 2017", xlab="NDVI", nclass=20, freq=F, ylim=c(0,5), col=brewer.pal(9, "Greens"))
ist24 <- hist(ndvi2024, main="NDVI 2024", xlab="NDVI", nclass=20, freq=F, ylim=c(0,5), col=brewer.pal(9, "Greens"))  # Palette "Greens"
dev.off()

# PCA Analysis for spatial variability

pca17 <- im.pca(bm17)

pca1 = 38.966791
pca2 = 24.927165
pca3 = 7.061764
pca4 = 3.160646

tot17 <- sum(38.966791, 24.927165, 7.061764, 3.160646)
c(38.966791*100/tot17, 24.927165*100/tot17, 7.061764*100/tot17, 3.160646*100/tot17)

52.575151,  33.632471,  9.527942,  4.264437 #variability explained by each axis

pc17c <- pca17[[1]] + pca17[[2]]
pcsd17 <- focal(pc17c, matrix(1/9,3,3),fun=sd)

do the same for 2024

pca24 <- im.pca(bm24)

pca1 = 43.268299
pca2 = 30.392128
pca3 = 7.706479
pca4 = 2.916731

tot24 <- sum(43.268299, 30.392128, 7.706479, 2.916731)
c(43.268299*100/tot24, 30.392128*100/tot24, 7.706479*100/tot24, 2.916731*100/tot24)

51.336535, 36.059346,  9.143506,  3.460614

pc24c <- pca24[[1]] + pca24[[2]]
pcsd24 <- focal(pc24c, matrix(1/9,3,3),fun=sd)

# results in a multiframe
par(mfrow=c(1,2))
plot(pcsd17, col=viridisc)
plot(pcsd24, col=viridisc)

correlazione informazioni

pairs(bandamaradi17)
pairs(bandamaradi24)


