# reflectance: amount of light based on incident light. the radiation we see is narrow, from blue to red, the visible, there are additional lenghts we can use like infra-red or UV. different animals see different lengths, humans see from blue to red. we take an instrument called APEX in which there are several sensors inside, each sensors see the landscape in different wave-lenght, you mount the instruments on top of drones and satellites and each sensor record the landscape in different parts. One see only in narrow red part of the spectrum, another in yellow part of spectrum etc. we will have sensors specific for each length and measure how much reflectance for each lenght. We can mount all the information to create an image made by different layers each one representing a lenght. Let's use them.
# Code for visualizing remote sensing data
install.packages("devtools") 
install.packages("terra")
# installing the imageRy package
install_github("ducciorocchini/imageRy")
library(imageRy)
# installa rtools, cercalo su google e installalo 

#install.packages("devtools") then: library(devtools) -> install_github("ducciorocchini/imageRy") -> Also install the terra package by: -> install.packages("terra") -> and the ggplot2 package by: -> install.packages("ggplot2")
# today we deal with remote sensing -> code for remote sensing data handling and analysis 
# so we see the spectrum of visible, from blue to red. with sensor we can see the other length using Apex for example
#install.packages("devtools")
#install_github("ducciorocchini/imageRy)
library(terra)
# now we can use imageRy package that we can find in Duccio's github account 
im.list() #report of all the data in the function
# in the data we find sentinel.dolomites.b2.tif -> data in the package, provided for sentinels data of the dolomites. sentinel datas are coming from programm like Copernicus that provides data from all planet 
# bands are how to see the lengths in certain wave -> Sentinel-2 bands name of the satellite. among the data we have sentinel.dolomites.b2 (b2 = band 2 -> the blue -> we're working at wavelenght 490 nm)
b2 <- im.import("sentinel.dolomites.b2.tif") #importing the data outside the package 
# now change color 
cl <- colorRampPalette(c("black","grey","light grey")) (100) 
plot (b2, col = cl) # first we change the color and then we put them in the plot with b2 of before
# passive sensor: sunlight passes the atmosphere, passes an object and comes back to the satellite. Incident radiant flux = energy coming from an object. part of this radiation is reflect and it is reflected radiant flux. the reflectance is ranging from 0 to 1. 
# let's import a second band, the number 3 -> green 
exercise: import b3 and plot it with the previous palette
> b3 <- im.import("sentinel.dolomites.b3.tif")
> plot (b3, col = cl) 
# this is the reflectance of objects considering the green wavelength 
# now we use band 4 -> 665 nm -> red wavelength
> b4 <- im.import("sentinel.dolomites.b4.tif")
> plot(b4, col=cl)
# we do the same for band 8 -> 842 nm -> visible and near infrared (VNIR). we skipped the other band for the low resolution
# why is it called near infrared? it's near to the visible part. the thermal reflects differently from the heat. between near infrared and thermal there is middle.
#let's import the NIR (near infrared) band
> b8 <- im.import("sentinel.dolomites.b8.tif")
> plot(b8, col=cl)
# we can plot in a multiframe all the images together
> par(mfrow=c(2,2))
> plot(b2, col=cl)
> plot(b3, col=cl)
> plot(b4, col=cl)
> plot(b8, col=cl)
# now we can stack them in the same image.
> plot(b2, col=cl)
> plot(b3, col=cl)
> plot(b4, col=cl)
> plot(b8, col=cl)
sentstack <- c(b2,b3,b4,b8)
plot(sentstack, col=cl) # appare come plot ma Ã¨ come se fossero sovrapposti, te li fa comunque vedere plottati, se scrivi su R sentstack ti dice in "sources" che ci sono 


